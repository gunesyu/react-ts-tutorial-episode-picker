{"version":3,"sources":["Components/EpisodeList.tsx"],"names":["EpisodeList","props","episodes","favorites","toggleFav","currentListingSeason","map","episode","isSepShown","season","isEpisodeFav","find","fav","id","key","className","name","toPrefixed","number","airdate","airtime","src","image","original","alt","dangerouslySetInnerHTML","__html","summary","href","url","target","type","onClick","n","toString"],"mappings":"uHAAA,mEAEe,SAASA,EAAYC,GAA0B,IACpDC,EAAmCD,EAAnCC,SAAUC,EAAyBF,EAAzBE,UAAWC,EAAcH,EAAdG,UAEzBC,EAA+B,EAEnC,OAAOH,EAASI,KAAI,SAACC,GACnB,IAAIC,EAAsBD,EAAQE,SAAWJ,EACzCG,IACFH,EAAuBE,EAAQE,QAGjC,IAAIC,IAAwBP,EAAUQ,MACpC,SAACC,GAAD,OAAcA,EAAIC,KAAON,EAAQM,MAKnC,OACE,oCACGL,EACC,wBAAIM,IAAKT,EAAsBU,UAAU,aAAzC,UACUV,GAER,KACJ,yBAAKS,IAAKP,EAAQM,GAAIE,UAAU,mBAC9B,wBAAIA,UAAU,gBAAgBR,EAAQS,MACtC,uBAAGD,UAAU,gBAAb,IACIE,EAAWV,EAAQE,QADvB,IACiCQ,EAAWV,EAAQW,QADpD,KAC+D,IAC7D,0BAAMH,UAAU,oBACbR,EAAQY,QADX,OACqBZ,EAAQa,UAG/B,yBACEL,UAAU,gBACVM,IAAKd,EAAQe,MAAMC,SACnBC,IAAK,WAAajB,EAAQW,OAAS,WAErC,yBACEH,UAAU,kBACVU,wBAAyB,CAAEC,OAAQnB,EAAQoB,WAE7C,yBAAKZ,UAAU,mBACb,uBAAGa,KAAMrB,EAAQsB,IAAKC,OAAO,SAA7B,SAGA,4BACEC,KAAK,SACLC,QAAS,kBAAM5B,EAAUG,IACzBQ,UAAW,yBAA2BL,GAErCA,EAAe,kBAAoB,0BASlD,IAAMO,EAAa,SAACgB,GAClB,OAAOA,EAAI,GAAK,IAAMA,EAAIA,EAAEC","file":"static/js/3.22ce7039.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function EpisodeList(props: any): JSX.Element {\n  const { episodes, favorites, toggleFav } = props;\n\n  let currentListingSeason: number = 0;\n\n  return episodes.map((episode: any) => {\n    let isSepShown: boolean = episode.season !== currentListingSeason;\n    if (isSepShown) {\n      currentListingSeason = episode.season;\n    }\n\n    let isEpisodeFav: boolean = favorites.find(\n      (fav: any) => fav.id === episode.id\n    )\n      ? true\n      : false;\n\n    return (\n      <>\n        {isSepShown ? (\n          <h2 key={currentListingSeason} className=\"separator\">\n            Season {currentListingSeason}\n          </h2>\n        ) : null}\n        <div key={episode.id} className=\"episode-wrapper\">\n          <h2 className=\"episode-name\">{episode.name}</h2>\n          <p className=\"episode-info\">\n            S{toPrefixed(episode.season)}E{toPrefixed(episode.number)} -{\" \"}\n            <span className=\"episode-datetime\">\n              {episode.airdate}Â {episode.airtime}\n            </span>\n          </p>\n          <img\n            className=\"episode-cover\"\n            src={episode.image.original}\n            alt={\"Episode \" + episode.number + \" Cover\"}\n          />\n          <div\n            className=\"episode-summary\"\n            dangerouslySetInnerHTML={{ __html: episode.summary }}\n          ></div>\n          <div className=\"episode-actions\">\n            <a href={episode.url} target=\"blank\">\n              Watch\n            </a>\n            <button\n              type=\"button\"\n              onClick={() => toggleFav(episode)}\n              className={\"favorite-btn favorite-\" + isEpisodeFav}\n            >\n              {isEpisodeFav ? \"Remove Favorite\" : \"Add to Favorites\"}\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  });\n}\n\nconst toPrefixed = (n: number): string => {\n  return n < 10 ? \"0\" + n : n.toString();\n};\n"],"sourceRoot":""}