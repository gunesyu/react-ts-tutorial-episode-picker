{"version":3,"sources":["Store/Store.tsx","Components/Header.tsx","Components/Loader.tsx","App.tsx","Store/actions.ts","Store/reducer.ts","Store/StoreProvider.tsx","index.tsx"],"names":["initialState","episodes","favorites","list","Store","createContext","Header","props","counter","count","onClick","clickHandler","EpisodeList","lazy","App","useContext","state","dispatch","useEffect","length","fetchEpisodes","a","fetch","data","json","dataJSON","type","payload","_embedded","fallback","Loader","toggleFav","episode","actionType","includes","reducer","action","newEpisodes","newFavorites","newList","filter","fav","id","StoreProvider","useReducer","Provider","value","children","ReactDOM","render","document","getElementById"],"mappings":"+QAIaA,EAAuB,CAChCC,SAAU,GACVC,UAAW,GACXC,KAAM,YAKGC,EAAQC,wBAA4BL,GCVlC,SAASM,EAAOC,GAC3B,IAAMC,EAAUD,EAAME,MAAQ,0BAAMC,QAASH,EAAMI,cAArB,MAAuCJ,EAAME,MAA7C,cAA6E,KAE3G,OACI,gCACI,4CACA,2DAAiCD,ICN9B,wBACX,2CCQEI,G,MAAcC,gBAAK,kBAAM,iCA0ChBC,MAxCf,WAA6B,IAAD,EACEC,qBAAWX,GAA/BY,EADkB,EAClBA,MAAOC,EADW,EACXA,SAEfC,qBAAU,WACkB,IAA1BF,EAAMf,SAASkB,QAAgBC,OAGjC,IAAMA,EAAa,uCAAG,8BAAAC,EAAA,sEACDC,MHXS,2EGUR,cACdC,EADc,gBAEGA,EAAKC,OAFR,cAEdC,EAFc,yBAGbR,EAAS,CACdS,KCxBwB,iBDyBxBC,QAASF,EAASG,UAAU3B,YALV,2CAAH,qDAqBnB,OACE,oCACE,kBAACK,EAAD,CAAQG,MAAOO,EAAMd,UAAUiB,OAAQR,aANxB,kBAAeM,EAAS,CACzCS,KCnC4B,wBDyC1B,iCACE,kBAAC,WAAD,CAAUG,SAAU,kBAACC,EAAD,OAClB,kBAAClB,EAAD,CAAaX,SAAUe,EAAMA,EAAMb,MAAOD,UAAWc,EAAMd,UAAW6B,UAjBvD,SAACC,GACtB,IAAMC,EAAajB,EAAMd,UAAUgC,SAASF,GC5BjB,kBADH,eD8BxB,OAAOf,EAAS,CACdS,KAAMO,EACNN,QAASK,W,qBEPAG,MAvBf,SAAiBnB,EAAeoB,GAC5B,IAAIC,EAAqB,GACrBC,EAAsB,GACtBC,EAAkB,GAEtB,OAAQH,EAAOV,MACX,IDTsB,iBCWlB,OADAW,EAAcD,EAAOT,QACd,2BAAIX,GAAX,IAAkBf,SAAUoC,IAChC,IDXoB,eCahB,OADAC,EAAY,sBAAOtB,EAAMd,WAAb,CAAwBkC,EAAOT,UACpC,2BAAIX,GAAX,IAAkBd,UAAWoC,IACjC,IDbuB,kBCenB,OADAA,EAAY,YAAOtB,EAAMd,UAAUsC,QAAO,SAACC,GAAD,OAAcA,EAAIC,KAAON,EAAOT,QAAQe,OAC3E,2BAAI1B,GAAX,IAAkBd,UAAWoC,IACjC,IDfwB,mBCiBpB,OADAC,EAAyB,aAAfvB,EAAMb,KAAsB,YAAc,WAC7C,2BAAIa,GAAX,IAAkBb,KAAMoC,IAC5B,QACI,OAAOvB,ICjBJ,SAAS2B,EAAcpC,GAA0B,IAAD,EACjCqC,qBAAWT,EAASnC,GADa,mBACpDgB,EADoD,KAC7CC,EAD6C,KAG3D,OAAO,kBAACb,EAAMyC,SAAP,CAAgBC,MAAO,CAAC9B,QAAOC,aAAYV,EAAMwC,UCF5DC,IAASC,OACP,kBAACN,EAAD,KACE,kBAAC,EAAD,OAEFO,SAASC,eAAe,W","file":"static/js/main.05587138.chunk.js","sourcesContent":["import React, { createContext } from 'react'\n\nimport { IState } from '../interfaces'\n\nexport const initialState: IState = {\n    episodes: [],\n    favorites: [],\n    list: 'episodes'\n}\n\nexport const endpoint: string = 'https://api.tvmaze.com/singlesearch/shows?q=breaking bad&embed=episodes'\n\nexport const Store = createContext<IState | any>(initialState);\n","import React from 'react'\n\nexport default function Header(props: any): JSX.Element {\n    const counter = props.count ? <span onClick={props.clickHandler}>- ({props.count}) &lt;toggle&gt;</span> : null\n\n    return (\n        <header>\n            <h1>Breaking Bad</h1>\n            <h6>Pick Your Favorite Episodes {counter}</h6>\n        </header>\n    )\n}\n","import React from 'react'\n\nexport default (): JSX.Element => (\n    <p>Loading ...</p>\n)\n","import React, { useContext, useEffect, lazy, Suspense } from 'react';\n\nimport { Store, endpoint } from './Store/Store'\nimport { IAction } from './interfaces'\nimport * as actions from './Store/actions'\n\nimport Header from './Components/Header'\nimport Loader from './Components/Loader'\n\nimport './App.css';\n\nconst EpisodeList = lazy(() => import('./Components/EpisodeList'))\n\nfunction App(): JSX.Element {\n  const { state, dispatch } = useContext(Store)\n\n  useEffect(() => {\n    state.episodes.length === 0 && fetchEpisodes()\n  })\n\n  const fetchEpisodes = async () => {\n    const data = await fetch(endpoint)\n    const dataJSON = await data.json()\n    return dispatch({\n      type: actions.FETCH_EPISODES,\n      payload: dataJSON._embedded.episodes\n    })\n  }\n\n  const toggleFavorite = (episode: any): IAction => {\n    const actionType = state.favorites.includes(episode) ? actions.REMOVE_FAVORITE : actions.ADD_FAVORITE;\n    return dispatch({\n      type: actionType,\n      payload: episode\n    })\n  }\n\n  const changeList = (): IAction => dispatch({\n    type: actions.CHANGE_LIST_TYPE\n  })\n\n  return (\n    <>\n      <Header count={state.favorites.length} clickHandler={changeList} />\n      <section>\n        <Suspense fallback={<Loader />}>\n          <EpisodeList episodes={state[state.list]} favorites={state.favorites} toggleFav={toggleFavorite} />\n        </Suspense>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","export const FETCH_EPISODES = 'FETCH_EPISODES'\nexport const ADD_FAVORITE = 'ADD_FAVORITE'\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE'\nexport const CHANGE_LIST_TYPE = 'CHANGE_LIST_TYPE'","import { IState, IAction } from '../interfaces'\nimport * as actions from './actions'\n\nfunction reducer(state: IState, action: IAction): IState {\n    let newEpisodes: any[] = []\n    let newFavorites: any[] = []\n    let newList: string = ''\n\n    switch (action.type) {\n        case actions.FETCH_EPISODES:\n            newEpisodes = action.payload\n            return {...state, episodes: newEpisodes}\n        case actions.ADD_FAVORITE:\n            newFavorites = [...state.favorites, action.payload]\n            return {...state, favorites: newFavorites}\n        case actions.REMOVE_FAVORITE:\n            newFavorites = [...state.favorites.filter((fav: any) => fav.id !== action.payload.id)]\n            return {...state, favorites: newFavorites}\n        case actions.CHANGE_LIST_TYPE:\n            newList = state.list === \"episodes\" ? \"favorites\" : \"episodes\"\n            return {...state, list: newList}\n        default:\n            return state\n    }\n}\n\nexport default reducer","import React, { useReducer } from 'react'\n\nimport { Store, initialState } from './Store'\nimport reducer from './reducer'\n\nexport default function StoreProvider(props: any): JSX.Element {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return <Store.Provider value={{state, dispatch}}>{props.children}</Store.Provider>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport StoreProvider from './Store/StoreProvider'\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}